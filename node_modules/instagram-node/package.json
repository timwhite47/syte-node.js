{
  "name": "instagram-node",
  "version": "0.1.6",
  "description": "Simple Instagram driver for Node.js",
  "keywords": [
    "instagram",
    "node",
    "ig",
    "driver"
  ],
  "homepage": "https://github.com/teleportd/instagram-node",
  "author": {
    "name": "Anthony MOI",
    "email": "anthony@teleportd.com",
    "url": "https://github.com/n1t0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/teleportd/instagram-node.git"
  },
  "dependencies": {
    "fwk": "0.1.x"
  },
  "main": "./lib/instagram",
  "engines": {
    "node": ">=v0.6.0"
  },
  "readme": "instagram-node\n==============\n\nNodeJS driver for the Instagram API.\nIn production at http://nitrogr.am aggregating more than 200 data points per seconds\n\n## Installation\n\n`npm install instagram-node`\n\n## Features\n\nAlmost all instagram actions can be done with this tool. (Geographies are not available at this time, but they will be soon !)\n\n## How it works\n\n* First of all, you need to authentify. You can use `client_id/client_secret` from the app you are building, or an `access_token` from\na user that use your app.\n* **Some features need an access_token to work**\n\n```javascript\nvar ig = require('instagram-node').instagram();\n\nig.use({ access_token: 'YOUR_ACCESS_TOKEN' });\nig.use({ client_id: 'YOUR_CLIENT_ID',\n         client_secret: 'YOUR_CLIENT_SECRET' });\n```\n\nWhen it's done, here is the full list of what you can do:\n\n```javascript\n\n/********************************/\n/*            USERS             */\n/********************************/\nig.user('user_id', function(err, result, limit) {});\n\n/* OPTIONS: { [count], [min_id], [max_id] }; */\nig.user_self_feed([options,] function(err, medias, pagination, limit) {});\n\n/* OPTIONS: { [count], [min_timestamp], [max_timestamp], [min_id], [max_id] }; */\nig.user_media_recent('user_id', [options,] function(err, medias, pagination, limit) {});\n\n/* OPTIONS: { [count], [max_like_id] }; */\nig.user_self_liked([options,] function(err, medias, pagination, limit) {});\n\n/* OPTIONS: { [count] }; */\nig.user_search('username', [options,] function(err, users, limit) {});\n\n/********************************/\n/*         RELATIONSHIP         */\n/********************************/\n/* OPTIONS: { [count], [cursor] }; */\nig.user_follows('user_id', function(err, users, pagination, limit) {});\n\n/* OPTIONS: { [count], [cursor] }; */\nig.user_followers('user_id', function(err, users, pagination, limit) {});\n\nig.user_self_requested_by(function(err, users, limit) {});\n\nig.user_relationship('user_id', function(err, result, limit) {});\n\nig.set_user_relationship('user_id', 'follow', function(err, result, limit) {});\n\n/********************************/\n/*           MEDIAS             */\n/********************************/\nig.media('media_id', function(err, media, limit) {});\n\n/* OPTIONS: { [min_timestamp], [max_timestamp], [distance] }; */\nig.media_search(48.4335645654, 2.345645645, [options,] function(err, medias, limit) {});\n\nig.media_popular(function(err, medias, limit) {});\n\n/********************************/\n/*           COMMENTS           */\n/********************************/\nig.comments('media_id', function(err, result, limit) {});\n\nig.add_comment('media_id', 'your comment', function(err, limit) {});\n\nig.del_comment('media_id', 'comment_id', function(err, limit) {});\n\n/********************************/\n/*            LIKES             */\n/********************************/\nig.likes('media_id', function(err, result, limit) {});\n\nig.add_like('media_id', function(err, limit) {});\n\nig.del_like('media_id', function(err, limit) {});\n\n/********************************/\n/*             TAGS             */\n/********************************/\nig.tag('tag', function(err, result, limit) {});\n\n/* OPTIONS: { [min_tag_id], [max_tag_id] }; */\nig.tag_media_recent('tag', [options,] function(err, medias, pagination, limit) {});\n\nig.tag_search('query', function(err, result, limit) {});\n\n/********************************/\n/*           LOCATIONS          */\n/********************************/\nig.location('location_id', function(err, result, limit) {});\n\n/* OPTIONS: { [min_id], [max_id], [min_timestamp], [max_timestamp] }; */\nig.location_media_recent('location_id', [options,] function(err, result, pagination, limit) {});\n\n/* SPECS: { lat, lng, [foursquare_v2_id], [foursquare_id] }; */\n/* OPTIONS: { [distance] }; */\nig.location_search({ lat: 48.565464564, lng: 2.34656589 }, [options,] function(err, result, limit) {});\n```\n\n## Errors\n\nWhen errors occur, you receive an error object with default properties, but we also add some other things:\n\n    // Available when the error comes from Instagram API\n    err.code;                // code from Instagram\n    err.error_type;          // error type from Instagram\n    err.error_message;       // error message from Instagram\n    \n    // If the error occurs while requesting the API\n    err.status_code;         // the response status code\n    err.body;                // the received body\n\nand\n\n    err.retry(); // Lets you retry in the same conditions that before\n\n## Pagination\n\nWhen you use functions like `user_media_recent` or `tag_media_recent`, you will get a `pagination` object in your callback. This object \nis basically the same that Instagram would give you but there will be a `next()` function that let you retrieve next results without caring about anything.\n\n```javascript\nvar ig = require('instagram-node').instagram();\n\nvar hdl = function(err, result, pagination, limit) {\n  // Your implementation here\n  if(pagination.next) {\n    pagination.next(hdl); // Will get second page results\n  }\n};\n  \nig.tag_media_recent('test', hdl);\n```\n\n## Tests\n\nPut the following in your environment:\n\n    export INSTAGRAM_ACCESS_TOKEN=YOUACCESSTOKEN\n\nThen just use\n\n    make test\n\n## More infos\n\n* You can find more informations on the [Instagram developper](http://instagram.com/developer) website.\n* If you have any questions or remark, feel free to contact us at `boom@nitrogr.am`\n\n## License\n\nDistributed under the MIT License.\n\n",
  "_id": "instagram-node@0.1.6",
  "dist": {
    "shasum": "42536709948033634672e3bdb04dd44c10906f72"
  },
  "_from": "instagram-node@*"
}
